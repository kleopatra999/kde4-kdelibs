Index: kio/kio/slave.cpp
===================================================================
--- kio/kio/slave.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kio/kio/slave.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -125,9 +125,10 @@
 void Slave::timeout()
 {
     Q_D(Slave);
+   if (d->dead)
+      return;
    if (d->connection->isConnected())
       return;
-
    kDebug(7002) << "slave failed to connect to application pid=" << d->m_pid << " protocol=" << d->m_protocol;
    if (d->m_pid && (::kill(d->m_pid, 0) == 0))
    {
Index: kio/kio/jobuidelegate.cpp
===================================================================
--- kio/kio/jobuidelegate.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kio/kio/jobuidelegate.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -79,17 +79,19 @@
                                                      sizeSrc, sizeDest,
                                                      ctimeSrc, ctimeDest, mtimeSrc,
                                                      mtimeDest);
+    connect(job, SIGNAL(finished(KJob*)), &dlg, SLOT(reject())); // #192976
     KIO::RenameDialog_Result res = static_cast<RenameDialog_Result>(dlg.exec());
     newDest = dlg.newDestUrl().path();
     return res;
 }
 
-KIO::SkipDialog_Result KIO::JobUiDelegate::askSkip(KJob *,
+KIO::SkipDialog_Result KIO::JobUiDelegate::askSkip(KJob *job,
                                               bool multi,
                                               const QString & error_text)
 {
     // We now do it in process. So this method is a useless wrapper around KIO::open_RenameDialog.
     KIO::SkipDialog dlg( window(), multi, error_text );
+    connect(job, SIGNAL(finished(KJob*)), &dlg, SLOT(reject())); // #192976
     return static_cast<KIO::SkipDialog_Result>(dlg.exec());
 }
 
Index: kio/kio/kzip.h
===================================================================
--- kio/kio/kzip.h	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kio/kio/kzip.h	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -149,9 +149,7 @@
     /// Closes the archive
     virtual bool closeArchive();
 
-    /**
-     * @internal Not needed for zip
-     */
+    /// Reimplemented from KArchive
     virtual bool doWriteDir( const QString& name, const QString& user,
                              const QString& group, mode_t perm, time_t atime,
                              time_t mtime, time_t ctime );
Index: kio/kio/karchive.cpp
===================================================================
--- kio/kio/karchive.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kio/kio/karchive.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -351,7 +351,7 @@
                          mode_t perm, time_t atime,
                          time_t mtime, time_t ctime )
 {
-    return doWriteDir( name, user, group, perm, atime, mtime, ctime );
+    return doWriteDir( name, user, group, perm | 040000, atime, mtime, ctime );
 }
 
 bool KArchive::writeSymLink(const QString &name, const QString &target,
@@ -729,7 +729,9 @@
 
 void KArchiveDirectory::addEntry( KArchiveEntry* entry )
 {
-  Q_ASSERT( !entry->name().isEmpty() );
+  if( entry->name().isEmpty() )
+    return;
+
   if( d->entries.value( entry->name() ) ) {
       kWarning() << "directory " << name()
                   << "has entry" << entry->name() << "already";
Index: kio/kio/kzip.cpp
===================================================================
--- kio/kio/kzip.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kio/kio/kzip.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -995,9 +995,15 @@
     return true;
 }
 
-bool KZip::doWriteDir( const QString&, const QString&, const QString&,
-                       mode_t, time_t, time_t, time_t ) {
-        return true;
+bool KZip::doWriteDir( const QString &name, const QString &user, const QString &group,
+                       mode_t perm, time_t atime, time_t mtime, time_t ctime ) {
+    // Zip files have no explicit directories, they are implicitly created during extraction time
+    // when file entries have paths in them.
+    // However, to support empty directories, we must create a dummy file entry which ends with '/'.
+    QString dirName = name;
+    if (!name.endsWith("/"))
+        dirName = dirName.append('/');
+    return writeFile(dirName, user, group, 0, 0, perm, atime, mtime, ctime);
 }
 
 bool KZip::doPrepareWriting(const QString &name, const QString &user,
Index: kio/tests/jobtest.cpp
===================================================================
--- kio/tests/jobtest.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kio/tests/jobtest.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -1130,7 +1130,7 @@
 
 void JobTest::getInvalidUrl()
 {
-    KUrl url("file://\"\"");
+    KUrl url("http://[strange;hostname]/");
     QVERIFY(!url.isValid());
 
     KIO::SimpleJob* job = KIO::get(url, KIO::NoReload, KIO::HideProgressInfo);
Index: kdecore/sycoca/ksycocafactory.cpp
===================================================================
--- kdecore/sycoca/ksycocafactory.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kdecore/sycoca/ksycocafactory.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -31,7 +31,10 @@
 class KSycocaFactory::Private
 {
 public:
-    Private() {}
+    Private() : mOffset(0),
+                m_sycocaDictOffset(0),
+                m_beginEntryOffset(0),
+                m_endEntryOffset(0) {}
     ~Private()
     {
         delete m_sycocaDict;
Index: kdecore/services/kmimetypefactory.cpp
===================================================================
--- kdecore/services/kmimetypefactory.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kdecore/services/kmimetypefactory.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -29,15 +29,16 @@
 
 KMimeTypeFactory::KMimeTypeFactory()
     : KSycocaFactory( KST_KMimeTypeFactory ),
+      m_fastPatternOffset(0),
+      m_highWeightPatternOffset(0),
+      m_lowWeightPatternOffset(0),
+      m_parentsMapOffset(0),
       m_highWeightPatternsLoaded(false),
       m_lowWeightPatternsLoaded(false),
       m_parentsMapLoaded(false),
       m_magicFilesParsed(false)
 {
     kMimeTypeFactoryInstance->instanceCreated(this);
-    m_fastPatternOffset = 0;
-    m_highWeightPatternOffset = 0;
-    m_lowWeightPatternOffset = 0;
     if (!KSycoca::self()->isBuilding()) {
         QDataStream* str = stream();
         Q_ASSERT(str);
Index: kdecore/tests/kurltest.cpp
===================================================================
--- kdecore/tests/kurltest.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kdecore/tests/kurltest.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -1452,26 +1452,32 @@
   weird = "http://strange<username>@strange<hostname>/";
   QVERIFY( !weird.isValid() );
 
-  weird = "http://strange<username>@ok_hostname/";
+  weird = "http://strange<username>@hostname/";
   QVERIFY( weird.isValid() ); // KDE3: was valid. Fixed by _setEncodedUrl.
-  QCOMPARE( weird.host(), QString("ok_hostname") );
+  QCOMPARE( weird.host(), QString("hostname") );
 
   weird = "http://strange;hostname/";
+#if QT_VERSION < 0x040600
   QVERIFY( weird.isValid() ); // KDE3: was invalid. bah*2.
+#endif
 
   weird = "http://strange;username@strange;hostname/";
+#if QT_VERSION < 0x040600
   QVERIFY( weird.isValid() ); // KDE3: was invalid. bah*3.
+#endif
 
-  weird = "http://strange;username@ok_hostname/";
+  weird = "http://strange;username@hostname/";
   QVERIFY( weird.isValid() );
-  QCOMPARE( weird.host(), QString("ok_hostname") );
+  QCOMPARE( weird.host(), QString("hostname") );
 
   weird = "http://strange;username:password@strange;hostname/";
+#if QT_VERSION < 0x040600
   QVERIFY( weird.isValid() ); // KDE3: was invalid
+#endif
 
-  weird = "http://strange;username:password@ok_hostname/";
+  weird = "http://strange;username:password@hostname/";
   QVERIFY( weird.isValid() );
-  QCOMPARE( weird.host(), QString("ok_hostname") );
+  QCOMPARE( weird.host(), QString("hostname") );
 
   weird = "http://[strange;hostname]/";
   QVERIFY( !weird.isValid() );
@@ -1626,10 +1632,16 @@
   QCOMPARE( leo.path(), QString("text/html,http://www.invalid/" ) );
 
   KUrl ptal( "ptal://mlc:usb@PC_970" ); // User=mlc, password=usb, host=PC_970
+#if QT_VERSION >= 0x040600
+  QCOMPARE(ptal.url(), QString("ptal://mlc:usb@")); // The host "PC_970" is invalid according to STD3 validation
+  KUrl ptalSimpler("ptal://mlc:usb@pc123");
+  QCOMPARE(ptalSimpler.url(), QString("ptal://mlc:usb@pc123"));
+#else
   QVERIFY( ptal.isValid() );
   QCOMPARE( ptal.host(), QString("pc_970") );
   QCOMPARE( ptal.user(), QString("mlc") );
   QCOMPARE( ptal.pass(), QString("usb") );
+#endif
 }
 
 void KUrlTest::testUtf8()
@@ -1868,12 +1880,6 @@
   KUrl uwp( "http://%C3%A4.de" );
   QVERIFY( uwp.isValid() );
   QCOMPARE( thiago.url(), QString("http://xn--4ca.de") ); // as above
-
-  // #183720
-  const QByteArray init = ".kde.org";
-  const QString fromAce = QUrl::fromAce(init);
-  QCOMPARE( fromAce, QString(".kde.org"));
-  QCOMPARE( QUrl::toAce(fromAce), init );
 }
 
 void KUrlTest::testUriMode()
Index: kded/kbuildsycoca.cpp
===================================================================
--- kded/kbuildsycoca.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kded/kbuildsycoca.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -497,7 +497,7 @@
          mimeTypeFactory = static_cast<KBuildMimeTypeFactory *>( *factory );
       else if ( aId == KST_KServiceFactory )
          serviceFactory = static_cast<KBuildServiceFactory *>( *factory );
-      aOffset = (*factory)->offset();
+      aOffset = (*factory)->offset(); // not set yet, so always 0
       (*str) << aId;
       (*str) << aOffset;
    }
@@ -854,6 +854,7 @@
      if (QDBusConnection::sessionBus().isConnected()) {
         kDebug() << "Emitting notifyDatabaseChanged" << *g_changeList;
        QDBusConnection::sessionBus().send(signal);
+       qApp->processEvents(); // make sure the dbus signal is sent before we quit.
      }
    }
 
Index: kded/kbuildmimetypefactory.cpp
===================================================================
--- kded/kbuildmimetypefactory.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kded/kbuildmimetypefactory.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -100,6 +100,11 @@
     QMap<QString, QString> commentsByLanguage;
 
     const QStringList mimeFiles = KGlobal::dirs()->findAllResources(resource, file);
+    if (mimeFiles.isEmpty()) {
+        kWarning() << "No file found for" << file << ", even though the file appeared in a directory listing.";
+        kWarning() << "Either it was just removed, or the directory doesn't have executable permission...";
+        return 0;
+    }
     QListIterator<QString> mimeFilesIter(mimeFiles);
     mimeFilesIter.toBack();
     while (mimeFilesIter.hasPrevious()) { // global first, then local.
@@ -167,7 +172,7 @@
         kWarning() << "Missing <comment> field in" << file;
     }
 
-    //kDebug() << "Creating mimetype" << name << "from file" << file << "path" << fullPath;
+    //kDebug() << "Creating mimetype" << name << "from file" << file << mimeFiles;
 
     KMimeType* e;
     if ( name == "inode/directory" )
@@ -347,6 +352,10 @@
     const KMimeFileParser::AllGlobs& allGlobs = m_parser.mimeTypeGlobs();
     Q_FOREACH(const QString& mimeTypeName, m_parser.allMimeTypes()) {
         const KMimeType::Ptr mimeType = findMimeTypeByName(mimeTypeName, KMimeType::DontResolveAlias);
+        if (!mimeType) {
+            kDebug() << "globs file refers to unknown mimetype" << mimeTypeName;
+            continue;
+        }
         const KMimeFileParser::GlobList globs = allGlobs.value(mimeTypeName);
         Q_FOREACH(const KMimeFileParser::Glob& glob, globs) {
             const QString &pattern = glob.pattern;
Index: kdeui/dialogs/kdialog.cpp
===================================================================
--- kdeui/dialogs/kdialog.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kdeui/dialogs/kdialog.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -69,6 +69,10 @@
 
   Q_Q(KDialog);
 
+    // Don't lose the focus widget when re-creating the layout.
+    // Testcase: KOrganizer's "Select Categories" dialog
+    QPointer<QWidget> focusWidget = mMainWidget ? mMainWidget->focusWidget() : 0;
+
   if (q->layout() && q->layout() != mTopLayout) {
       kWarning(240) << q->metaObject()->className() << "created with a layout; don't do that, KDialog takes care of it, use mainWidget or setMainWidget instead";
       delete q->layout();
@@ -97,6 +101,10 @@
     mButtonBox->setOrientation( mButtonOrientation );
     mTopLayout->addWidget( mButtonBox );
   }
+
+    if (focusWidget) {
+        focusWidget->setFocus();
+    }
 }
 
 void KDialogPrivate::setButtonFocus(QPushButton *button, bool isDefault, bool isFocus)
Index: kdeui/tests/kglobalsettingstest.cpp
===================================================================
--- kdeui/tests/kglobalsettingstest.cpp	(.../tags/KDE/4.3.4/kdelibs)	(wersja 1057516)
+++ kdeui/tests/kglobalsettingstest.cpp	(.../branches/KDE/4.3/kdelibs)	(wersja 1057516)
@@ -49,6 +49,7 @@
 
 #define CREATE_ALL_SPYS \
     KGlobalSettings* settings = KGlobalSettings::self(); \
+    settings->activate();                                                 \
     QSignalSpy palette_spy( settings, SIGNAL(kdisplayPaletteChanged()) ); \
     QSignalSpy font_spy( settings, SIGNAL(kdisplayFontChanged()) ); \
     QSignalSpy style_spy( settings, SIGNAL(kdisplayStyleChanged()) ); \

Zmiany atrybutów dla: .
___________________________________________________________________
Dodane: svn:externals
   + 


